use revm_interpreter::opcode::*;

pub(crate) const OPCODE_NUMBER: usize = std::u8::MAX as usize + 1;

#[derive(Debug, Clone, Copy)]
pub(crate) struct OpcodeInfo {
    // /// opcode
    // pub(crate) opcode: u8,
    /// opcode category
    pub(crate) category: &'static str,
    /// gas fee
    pub(crate) gas: u64,
    /// opcode cost a fixed gas fee?
    pub(crate) static_gas: bool,
}

pub(crate) const MERGE_MAP: [(u8, OpcodeInfo); 144] = [
    (STOP, OpcodeInfo { category: "stop", gas: 0, static_gas: true }),
    (ADD, OpcodeInfo { category: "arithmetic", gas: 3, static_gas: true }),
    (MUL, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (SUB, OpcodeInfo { category: "arithmetic", gas: 3, static_gas: true }),
    (DIV, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (SDIV, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (MOD, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (SMOD, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (ADDMOD, OpcodeInfo { category: "arithmetic", gas: 8, static_gas: true }),
    (MULMOD, OpcodeInfo { category: "arithmetic", gas: 8, static_gas: true }),
    (EXP, OpcodeInfo { category: "arithmetic", gas: 10, static_gas: false }),
    (SIGNEXTEND, OpcodeInfo { category: "arithmetic", gas: 5, static_gas: true }),
    (LT, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (GT, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SLT, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SGT, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (EQ, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (ISZERO, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (AND, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (OR, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (XOR, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (NOT, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (BYTE, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SHL, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SHR, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SAR, OpcodeInfo { category: "bitwise", gas: 3, static_gas: true }),
    (SHA3, OpcodeInfo { category: "system", gas: 30, static_gas: false }),
    (ADDRESS, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (CODESIZE, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (CODECOPY, OpcodeInfo { category: "system", gas: 3, static_gas: false }),
    (CALLDATALOAD, OpcodeInfo { category: "system", gas: 3, static_gas: true }),
    (CALLDATASIZE, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (CALLDATACOPY, OpcodeInfo { category: "system", gas: 3, static_gas: false }),
    (CALLER, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (CALLVALUE, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (RETURNDATASIZE, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (RETURNDATACOPY, OpcodeInfo { category: "system", gas: 3, static_gas: false }),
    (GAS, OpcodeInfo { category: "system", gas: 2, static_gas: true }),
    (MLOAD, OpcodeInfo { category: "memory", gas: 3, static_gas: true }),
    (MSTORE, OpcodeInfo { category: "memory", gas: 3, static_gas: true }),
    (MSTORE8, OpcodeInfo { category: "memory", gas: 3, static_gas: true }),
    (MSIZE, OpcodeInfo { category: "memory", gas: 2, static_gas: true }),
    (POP, OpcodeInfo { category: "stack::pop", gas: 2, static_gas: true }),
    (PUSH0, OpcodeInfo { category: "stack::push", gas: 2, static_gas: true }),
    (PUSH1, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH2, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH3, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH4, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH5, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH6, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH7, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH8, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH9, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH10, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH11, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH12, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH13, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH14, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH15, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH16, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH17, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH18, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH19, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH20, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH21, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH22, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH23, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH24, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH25, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH26, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH27, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH28, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH29, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH30, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH31, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (PUSH32, OpcodeInfo { category: "stack::push", gas: 3, static_gas: true }),
    (DUP1, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP2, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP3, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP4, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP5, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP6, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP7, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP8, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP9, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP10, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP11, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP12, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP13, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP14, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP15, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (DUP16, OpcodeInfo { category: "stack::dup", gas: 3, static_gas: true }),
    (SWAP1, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP2, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP3, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP4, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP5, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP6, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP7, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP8, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP9, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP10, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP11, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP12, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP13, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP14, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP15, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (SWAP16, OpcodeInfo { category: "stack::swap", gas: 3, static_gas: true }),
    (JUMP, OpcodeInfo { category: "control", gas: 8, static_gas: true }),
    (JUMPI, OpcodeInfo { category: "control", gas: 10, static_gas: true }),
    (PC, OpcodeInfo { category: "control", gas: 2, static_gas: true }),
    (JUMPDEST, OpcodeInfo { category: "control", gas: 1, static_gas: true }),
    (RETURN, OpcodeInfo { category: "control", gas: 0, static_gas: true }),
    (REVERT, OpcodeInfo { category: "control", gas: 0, static_gas: true }),
    (BASEFEE, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (ORIGIN, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (GASPRICE, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (COINBASE, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (TIMESTAMP, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (NUMBER, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (DIFFICULTY, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (GASLIMIT, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (CHAINID, OpcodeInfo { category: "host_env", gas: 2, static_gas: true }),
    (BALANCE, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (SELFBALANCE, OpcodeInfo { category: "host", gas: 5, static_gas: true }),
    (EXTCODESIZE, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (EXTCODEHASH, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (EXTCODECOPY, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (BLOCKHASH, OpcodeInfo { category: "host", gas: 20, static_gas: true }),
    (SLOAD, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (SSTORE, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (LOG0, OpcodeInfo { category: "host", gas: 375, static_gas: false }),
    (LOG1, OpcodeInfo { category: "host", gas: 750, static_gas: false }),
    (LOG2, OpcodeInfo { category: "host", gas: 1125, static_gas: false }),
    (LOG3, OpcodeInfo { category: "host", gas: 1500, static_gas: false }),
    (LOG4, OpcodeInfo { category: "host", gas: 1875, static_gas: false }),
    (SELFDESTRUCT, OpcodeInfo { category: "host", gas: 5000, static_gas: false }),
    (CREATE, OpcodeInfo { category: "host", gas: 32000, static_gas: false }),
    (CREATE2, OpcodeInfo { category: "host", gas: 32000, static_gas: false }),
    (CALL, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (CALLCODE, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (DELEGATECALL, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (STATICCALL, OpcodeInfo { category: "host", gas: 100, static_gas: false }),
    (INVALID, OpcodeInfo { category: "invalid", gas: 0, static_gas: true }),
];
