[package]
name = "reth"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
description = """
Reth node implementation
"""

[package.metadata.cargo-udeps.ignore]
normal = [
    # Used for diagrams in docs
    "aquamarine",
]

[dependencies]
# reth
reth-config = { path = "../../crates/config" }
reth-primitives = { workspace = true, features = ["arbitrary"] }
reth-db = { path = "../../crates/storage/db", features = [
    "mdbx",
    "test-utils",
] }
# TODO: Temporary use of the test-utils feature
reth-provider = { workspace = true, features = ["test-utils"] }
reth-revm = { path = "../../crates/revm" }
reth-revm-inspectors = { path = "../../crates/revm/revm-inspectors" }
reth-stages = { path = "../../crates/stages" }
reth-interfaces = { workspace = true, features = ["test-utils", "clap"] }
reth-transaction-pool.workspace = true
reth-beacon-consensus = { path = "../../crates/consensus/beacon" }
reth-auto-seal-consensus = { path = "../../crates/consensus/auto-seal" }
reth-consensus-common = { path = "../../crates/consensus/common" }
reth-blockchain-tree = { path = "../../crates/blockchain-tree" }
reth-rpc-engine-api = { path = "../../crates/rpc/rpc-engine-api" }
reth-rpc-builder = { path = "../../crates/rpc/rpc-builder" }
reth-rpc = { path = "../../crates/rpc/rpc" }
reth-rpc-types = { path = "../../crates/rpc/rpc-types" }
reth-rpc-api = { path = "../../crates/rpc/rpc-api" }
reth-rlp.workspace = true
reth-network = { path = "../../crates/net/network", features = ["serde"] }
reth-network-api.workspace = true
reth-downloaders = { path = "../../crates/net/downloaders", features = [
    "test-utils",
] }
reth-tracing = { path = "../../crates/tracing" }
reth-tasks.workspace = true
reth-net-nat = { path = "../../crates/net/nat" }
reth-payload-builder.workspace = true
reth-basic-payload-builder = { path = "../../crates/payload/basic" }
reth-discv4 = { path = "../../crates/net/discv4" }
reth-prune = { path = "../../crates/prune" }
reth-trie = { path = "../../crates/trie" }

revm-utils = { workspace = true, optional = true }
revm-interpreter = { workspace = true, optional = true}
revm = { workspace = true, optional = true}

# crypto
secp256k1 = { workspace = true, features = [
    "global-context",
    "rand-std",
    "recovery",
] }

# tracing
tracing.workspace = true

# io
fdlimit = "0.2.1"
serde.workspace = true
serde_json.workspace = true
shellexpand = "3.0.0"
dirs-next = "2.0.0"
confy.workspace = true
toml = { workspace = true, features = ["display"] }

# metrics
metrics-exporter-prometheus = "0.12.1"
metrics-util = "0.15.0"
metrics-process = "1.0.9"
reth-metrics.workspace = true
metrics.workspace = true


# test vectors generation
proptest.workspace = true

# tui
comfy-table = "7.0"
crossterm = "0.25.0"
tui = "0.19.0"
human_bytes = "0.4.1"

# async
tokio = { workspace = true, features = [
    "sync",
    "macros",
    "time",
    "rt-multi-thread",
] }
futures.workspace = true
pin-project.workspace = true

# http/rpc
hyper = "0.14.25"

# misc
aquamarine.workspace = true
eyre = "0.6.8"
clap = { version = "4", features = ["derive"] }
tempfile = { version = "3.3.0" }
backon = "0.4"
hex = "0.4"
thiserror.workspace = true
pretty_assertions = "1.3.0"
humantime = "2.1.0"
const-str = "0.5.6"
boyer-moore-magiclen = "0.2.16"

minstant = { version = "0.1.3", optional = true }

parking_lot = { version = "0.12", optional = true }

[target.'cfg(not(windows))'.dependencies]
jemallocator = { version = "0.5.0", optional = true }
jemalloc-ctl = { version = "0.5.0", optional = true }

lazy_static = { version = "*", optional = true }

[features]
default = ["jemalloc"]
jemalloc = ["dep:jemallocator", "dep:jemalloc-ctl"]
jemalloc-prof = ["jemalloc", "jemallocator?/profiling"]
min-error-logs = ["tracing/release_max_level_error"]
min-warn-logs = ["tracing/release_max_level_warn"]
min-info-logs = ["tracing/release_max_level_info"]
min-debug-logs = ["tracing/release_max_level_debug"]
min-trace-logs = ["tracing/release_max_level_trace"]
open_performance_dashboard = [
    "reth-stages/open_performance_dashboard",
    "minstant",
    "parking_lot",
]
enable_opcode_metrics = [
    "reth-revm/enable_opcode_metrics",
    "reth-provider/enable_opcode_metrics",
    "reth-stages/enable_opcode_metrics",
    "revm-interpreter",
    "revm-utils",
    "revm",
    "lazy_static",
    "open_performance_dashboard",
]
enable_cache_record = [
    "reth-revm/enable_cache_record",
    "reth-provider/enable_cache_record",
    "reth-stages/enable_cache_record",
    "reth-rpc/enable_cache_record",
    "revm-utils",
    "open_performance_dashboard",
]
enable_tps_gas_record = [
    "reth-stages/enable_tps_gas_record",
    "open_performance_dashboard",
]
finish_after_execution_stage = ["reth-stages/finish_after_execution_stage"]
enable_execution_duration_record = [
    "reth-stages/enable_execution_duration_record",
    "open_performance_dashboard",
]
enable_test_max_th = ["reth-stages/enable_test_max_th"]
enable_db_speed_record = [
    "reth-stages/enable_db_speed_record",
    "open_performance_dashboard",
]

[build-dependencies]
vergen = { version = "8.0.0", features = ["build", "cargo", "git", "gitcl"] }
